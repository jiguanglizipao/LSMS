后端语言: python 3.4/3.5
网络框架: Django 1.8.4
环境配置：需安装以下库及插件
	Ubuntu: libsasl2-dev libldap2-dev libxslt-dev
	CentOs: openssl-devel gcc zlib-devel make saslwrapper-devel.x86_64 openldap-devel.x86_64 libxslt-devel.x86_64 

	pip: 	django pymysql xlrd xlsxwriter pyldap django-auth-ldap lxml uwsgi 
	
数据库配置及初始化。
	系统本身使用Mysql数据库，可在aglaia/settings.py里面的DATABASES中配置数据库的地址、端口、数据库名、用户名、密码等。如果只是要部署demo，可以使用sqlite，直接把DATABASES里面的ENGINE修改为django.db.backends.sqlite3即可，NAME为sqlite3数据文件的地址。
	使用LDAP服务器时要修改aglaia/settings.py里面的相应配置，若不需要可直接注释该代码段：
		AUTH_LDAP_SERVER_URI	LDAP服务器IP
		AUTH_LDAP_BIND_DN	LDAP服务器管理员
		AUTH_LDAP_BIND_PASSWORD	LDAP服务器密码
		AUTH_LDAP_USER_SEARCH	LDAP服务器搜索命令
		AUTH_LDAP_USER_ATTR_MAP	LDAP与本系统映射关系
		
	配置完毕后可以进行数据库的初始化，并创建数据库的超级管理员。
	python manage.py syncdb   初次执行这条语句会让你创建超级用户
	python manage.py migrate
	python manage.py createsuperuser 若在syncdb时创建过就不必了
	修改aglaia/settings.py中的DEBUG选项，改为True
	用 python manage.py runserver 启动，测试运行环境与配置文件是否正确

使用uWSGI+nginx部署：
	测试正确后，修改aglaia/settings.py中的DEBUG选项，改为False
	安装uWSGI与nginx
	修改uwsgi.ini文件中的目录，并在nginx中创建或修改相应配置文件（注意nginx对网站目录访问权限问题）
	类似于：
	location /static {
            alias /home/lsms/lsms/aglaia/static;
        }

        location / {
            uwsgi_pass 127.0.0.1:8000;
            include uwsgi_params;
        }
	之后使用uwsgi uwsgi.ini启动uwsgi服务，重启nginx即可访问
